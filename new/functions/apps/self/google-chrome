#!/bin/bash

# Google Chrome
function google-chrome {
eval `resize` 
exitstatus=$?
if [ $exitstatus = 0 ]; then
	status="0"
	while [ "$status" -eq 0 ]; do
		VERSION=$(whiptail \
		--title "Google Chrome" \
		--radiolist "Which version of Chrome would you like to install?" \
		--ok-button "Install" \
		--cancel-button "Go Back" \
		32 96 16 \
		"stable"	"Stable build" ON \
		"beta"		"Beta build" OFF \
		"unstable"	"Unstable build" OFF \
		3>&1 1>&2 2>&3) 
		# Change to lower case and remove spaces.
		case "${VERSION}" in
			stable) 
				# Variables
				PACKAGE=google-chrome-stable
				NAME="Google Chrome (Stable)"
				# Check if package is installed
				check_packages $PACKAGE
				exitstatus=$?
				# If package is not installed
				if [ $exitstatus = 1 ]; then
					display_info $NAME 'is not installed.'
					echo 'Proceeding'
					display_info 'Downloading '$NAME'...'
					# Download Debian file that matches system architecture
					case `uname -i` in
						i386|i486|i586|i686)
							curl -O https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb
							;;
						x86_64)
							curl -O https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
							;;
						*)
							whiptail --title "No remote packages available to download." --msgbox "Error." 8 64
							;;
					esac
					# Install package(s)
					display_info 'Installing '$NAME'...'
					elevate_privilege "dpkg -i $PACKAGE*.deb"
					elevate_privilege "apt install -fy"
					# Cleanup and finish
					rm $PACKAGE*.deb
					# Done
					display_success "Installation of '$PACKAGE' complete."
					whiptail --title "Finished" --msgbox "Installation of $NAME complete." 8 64
					status=1
					thirdparty_packages
				else
					# Already installed
					display_info $NAME 'already installed.'
					whiptail --title "Finished" --msgbox "$NAME is already installed." 8 64
					thirdparty_packages
				fi
			;;
			beta)
				# Variables
				PACKAGE=google-chrome-beta
				NAME="Google Chrome (Beta)"
				# Check if already installed
				check_packages $PACKAGE
				exitstatus=$?
				# If package is not installed
				if [ $exitstatus = 1 ]; then
					display_info $NAME 'is not installed.'
					echo 'Proceeding'
					display_info 'Downloading '$NAME'...'
					# Download Debian file that matches system architecture
					case `uname -i` in
						i386|i486|i586|i686)
							curl -O https://dl.google.com/linux/direct/google-chrome-beta_current_i386.deb
							;;
						x86_64)
							curl -O https://dl.google.com/linux/direct/google-chrome-beta_current_amd64.deb
							;;
						*)
							whiptail --title "No remote packages available to download." --msgbox "Error." 8 64
							;;
					esac
					# Install package(s)
					display_info 'Installing '$NAME'...'
					elevate_privilege "dpkg -i $PACKAGE*.deb"
					elevate_privilege "apt install -fy"
					# Cleanup and finish
					rm $PACKAGE*.deb
					# Done
					display_success "Installation of '$PACKAGE' complete."
					whiptail --title "Finished" --msgbox "Installation of $NAME complete." 8 64
					status=1
					thirdparty_packages
				else
					# Already installed
					display_info $NAME 'already installed.'
					whiptail --title "Finished" --msgbox "$NAME is already installed." 8 64
					thirdparty_packages
				fi
			;;
			unstable) 
				# Variables
				PACKAGE=google-chrome-unstable
				NAME="Google Chrome (Unstable)"
				# Check if already installed
				check_packages $PACKAGE
				exitstatus=$?
				# If package is not installed
				if [ $exitstatus = 1 ]; then
					display_info $NAME 'is not installed.'
					echo 'Proceeding'
					display_info 'Downloading '$NAME'...'
					# Download Debian file that matches system architecture
					case `uname -i` in
						i386|i486|i586|i686)
							curl -O https://dl.google.com/linux/direct/google-chrome-unstable_current_i386.deb
							;;
						x86_64)
							curl -O https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb
							;;
						*)
							whiptail --title "No remote packages available to download." --msgbox "Error." 8 64
							;;
					esac
					# Install package(s)
					display_info 'Installing '$NAME'...'
					elevate_privilege "dpkg -i $PACKAGE*.deb"
					elevate_privilege "apt install -fy"
					# Cleanup and finish
					rm $PACKAGE*.deb
					# Done
					display_success "Installation of '$PACKAGE' complete."
					whiptail --title "Finished" --msgbox "Installation of $NAME complete." 8 64
					status=1
					thirdparty_packges
				else
					# Already installed
					display_info $NAME 'already installed.'
					whiptail --title "Finished" --msgbox "$NAME is already installed." 8 64
					thirdparty_packages
				fi
			;;
			*) status=1 
				thirdparty
			;;
		esac
	done
else
	thirdparty
fi
}
